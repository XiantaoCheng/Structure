
-----------系统-----------
editor#0(,)[-1,-1]
m_plainText#1(editor#0,text#2)[-1,-1]
text#2"###################################################################
Select following sentences and push ctrl+R to run the code.
###################################################################

machine->+[runOneStep](,machine)
machine->+[run](,machine)
+[loadPool]


##################################################################
Those following sentences are setting system vertices. They are 
already set. Don't worry about them.
##################################################################

editor->m_motor(editor,_compiler)->_compiler->+[pop](,_compiler)
editor->m_pool(editor,_pool)->_pool->m_lib(_pool,_lib)->_lib->+[pop](,_lib)
editor->m_motor(editor,_compiler)->_compiler->+nouns(,_compiler)
editor->m_pool(editor,_pool)->_pool->m_lib(_pool,_lib)->_lib->+verbs(,_lib)
editor->m_screen(editor,_src)->_src->m_select(_src,_sel)->_sel->+selection(,_sel)


###################################################################
Following sentences are definition of verbs and nouns. They are 
already loaded now. Don't worry about them.
###################################################################

##########################    verbs    ############################
verbs(,_lib)->_lib->+[loadTerm]\"
+place(,machine)->+[del](,+place)->machine->tape(machine,cell)->cell(,_0)->_0->head(machine,cell#2)->cell#2(,)...
->+[down](machine,)->+[right]#2(+[down],)->+[down]#2(+[right]#2,)...
->+[moveTo](tape,+[down])...
->+[moveTo](cell,+[right]#2)->+[moveTo](_0,+[down]#2)->+[expand](,cell)...
->+[up](cell#2,)->+[moveTo](head,+[up])

+expand(,cell)->+[del](,+expand)->cell->next(cell,cell#2)->cell#2(,_0)->_0(,)...
->+[right](cell,)->+[right]#2(+[right],)->+[down](+[right]#2,)...
->+[moveTo](next,+[right])->+[moveTo](cell#2,+[right]#2)->+[moveTo](_0,+[down])...
->+[expand](,cell#2);
\"(,_lib)

verbs(,_lib)->_lib->+[loadTerm]\"
+moveRight(,machine)->+[del](,+moveRight)->machine->head(machine,cell)->cell->[]{
	next(cell,cell#2)->cell#2->+[rt_connect](head,cell#2)...
	->+[up](cell#2,)->+[moveTo](head,+[up])
}:->[],->>[]{
	+next(cell,+cell)->+cell(,+0)->+0->+[rt_connect](head,+cell)...
	->+[expand](,cell)...
	->+[up](+cell,)->+[moveTo](head,+[up])
};

+moveLeft(,machine)->+[del](,+moveLeft)->machine->head(machine,cell)->cell(,)...
->next(cell#2,cell)->cell#2->+[rt_connect](head,cell#2)...
->+[up](cell#2,)->+[moveTo](head,+[up]);
\"(,_lib)


verbs(,_lib)->_lib->+[loadTerm]\"
+writeCell(_re,machine)->+[del](,+writeCell)->_re\\"[01x]\\"->machine->head(machine,cell)->cell(,_01x)->_01x(,)...
->+[write](_re,_01x)
\"(,_lib)


verbs(,_lib)->_lib->+[loadTerm]\"
+move(machine,_LR)->+[del](,+move)->machine->_LR->+R->+[del](,+R)->[]{[eq](_LR,+R)}:
->+[moveRight](,machine),
->>+[moveLeft](,machine)
\"(,_lib)

verbs(,_lib)->_lib->+[loadTerm]\"
+runOneStep(,machine)->+[del](,+runOneStep)->machine->current(machine,state)->state(,)...
->head(machine,cell)->cell(,_01x)->_01x(,)...
->[branch](state,_01x)->next([branch],state#2)->state#2->+[rt_connect](current,state#2)...
->motion([branch],_LR)->_LR(,)...
->[]{write([branch],_01x#2)->_01x#2}:
->write([branch],_01x#3)->_01x#3->+[writeCell](_01x#3,machine)->+[move](machine,_LR),
->>+[move](machine,_LR)
\"(,_lib)

verbs(,_lib)->_lib->+[loadTerm]\"
+run(,machine)->+[del](,+run)->machine->current(machine,state)->state{[]=>end(,state)}...
->+[runOneStep](,machine)->+[run](,machine)
\"(,_lib)



##########################    nouns    ############################
nouns(,_lib)->_lib->+[loadTerm]\"
+branch(state,_re)->state->_re\\"[01x]\\"->next(state,state#2)->state#2(,)...
->if(next,_01x)->_01x->[eq](_01x,_re)...
->+next(+branch,state#2)->[]{
	then(if,_re#LR)->_re#LR\\"[LR]\\"->+motion(+branch,_re#LR)
}:->[],->>[]{
	then(if,_w)->_w->+write(+branch,_w)->then(_w,_LR)->_LR->+motion(+branch,_LR)
}\"(,_lib)



###################################################################
Following sentences are building Turing machine.
###################################################################

#######################    State Table   #########################
+initial(,state#1)->+state#1\"q1\"->+state#2\"q2\"->+state#3\"q3\"->+state#4\"q4\"->+state#5\"q5\"->+state#r\"reject\"->+state#a\"accept\"->+end(,+state#r)->+end(,+state#a):
->+x->+R->+next(+state#1,+state#r)->+if(+next,+x)->+then(+if,+R):
->+0->+1->+R->+next(+state#1,+state#2)->+if(+next,+0)->+then(+if,+1)->+then(+1,+R):
->+1->+R->+next(+state#1,+state#r)->+if(+next,+1)->+then(+if,+R):

->+x->+R->+next(+state#2,+state#2)->+if(+next,+x)->+then(+if,+R):
->+1->+R->+next(+state#2,+state#a)->+if(+next,+1)->+then(+if,+R):
->+0->+x->+R->+next(+state#2,+state#3)->+if(+next,+0)->+then(+if,+x)->+then(+x,+R):

->+x->+R->+next(+state#3,+state#3)->+if(+next,+x)->+then(+if,+R):
->+0->+R->+next(+state#3,+state#4)->+if(+next,+0)->+then(+if,+R):
->+1->+L->+next(+state#3,+state#5)->+if(+next,+1)->+then(+if,+L):

->+x->+R->+next(+state#4,+state#4)->+if(+next,+x)->+then(+if,+R):
->+0->+x->+R->+next(+state#4,+state#3)->+if(+next,+0)->+then(+if,+x)->+then(+x,+R):
->+1->+R->+next(+state#4,+state#r)->+if(+next,+1)->+then(+if,+R):

->+x->+L->+next(+state#5,+state#5)->+if(+next,+x)->+then(+if,+L):
->+0->+L->+next(+state#5,+state#5)->+if(+next,+0)->+then(+if,+L):
->+1->+R->+next(+state#5,+state#2)->+if(+next,+1)->+then(+if,+R)


#######################   Turing machine   ########################
+machine->+head(+machine,+cell)->+cell(,+0)->+tape(+machine,+cell)->+0

machine->initial(,state)->state->+current(machine,state)



###################################################################


machine=>state=>+[moveTo](state,machine)
[]=>next(state,)->state=>+[moveTo](next,state)
[]=>state=>+[up](state,)->+[moveTo](state,+[up])
[]=>state=>+[down](state,)->+[moveTo](state,+[down])
[]=>if(next,)->next=>+[right](next,)->+[moveTo](if,+[right])
[]=>if(,_)->_=>+[up](if,)->+[moveTo](_,+[up])
[]=>then(if,_)->if=>+[down](if,)->+[moveTo](then,+[down])
[]=>then(~if,)->~if=>+[moveTo](then,~if)
[]=>then(,_)->_=>+[moveTo](_,then)


machine->+[place](,machine)
machine->+[moveLeft](,machine)
machine->+[moveRight](,machine)
+1->machine->+[writeCell](+1,machine)



machine->+[runOneStep](,machine)
machine->+[run](,machine)

[]=>_=>+[del](,_)
selection(,list)->list=>.[i](list,_)->_=>+[del](,_)
+[savePool]
+[loadPool]
verbs(,_lib)->_lib->m_terms(_lib,list)->list=>.[i](list,_)->_=>+[push](,_)
nouns(,_lib)->_lib->m_terms(_lib,list)->list=>.[i](list,_)->_=>+[push](,_)
editor->place->+[编辑文本](editor,place)
editor->writeCell->+[编辑文本](editor,writeCell)
[]=>_=>+[检查连接节点](,_)"(,)[-1,-1]
m_pool#3(editor#0,pool#4)[-1,-1]
pool#4(,)[-1,-1]
m_contain#5(pool#4,points#6)[-1,-1]
points#6"0#0(,)[0,-2]
tape#1(machine#4,cell#2)[-1,-3]
cell#2(,0#0)[0,-3]
head#3(machine#4,cell#2)[0,-4]
machine#4(,)[-1,-4]
0#5(,)[2,-2]
cell#6(,0#5)[2,-3]
next#7(cell#2,cell#6)[1,-3]
0#8(,)[4,-2]
cell#9(,0#8)[4,-3]
next#10(cell#6,cell#9)[3,-3]
0#11(,)[6,-2]
cell#12(,0#11)[6,-3]
next#13(cell#9,cell#12)[5,-3]
1#14(,)[8,-2]
cell#15(,1#14)[8,-3]
next#16(cell#12,cell#15)[7,-3]
then#17(if#18,R#20)[7,-21]
if#18(next#19,1#21)[7,-22]
next#19(state#100,state#103)[6,-22]
R#20(,)[7,-21]
1#21(,)[7,-23]
then#22(if#23,L#25)[7,-21]
if#23(next#24,0#26)[7,-22]
next#24(state#100,state#100)[6,-22]
L#25(,)[7,-21]
0#26(,)[7,-23]
then#27(if#28,L#30)[7,-21]
if#28(next#29,x#31)[7,-22]
next#29(state#100,state#100)[6,-22]
L#30(,)[7,-21]
x#31(,)[7,-23]
then#32(if#33,R#35)[8,-13]
if#33(next#34,1#36)[8,-14]
next#34(state#101,state#99)[7,-14]
R#35(,)[8,-13]
1#36(,)[8,-15]
then#37(x#42,R#41)[8,-13]
then#38(if#39,x#42)[8,-13]
if#39(next#40,0#43)[8,-14]
next#40(state#101,state#102)[7,-14]
R#41(,)[8,-13]
x#42(,)[8,-13]
0#43(,)[8,-15]
then#44(if#45,R#47)[8,-13]
if#45(next#46,x#48)[8,-14]
next#46(state#101,state#101)[7,-14]
R#47(,)[8,-13]
x#48(,)[8,-15]
then#49(if#50,L#52)[8,-18]
if#50(next#51,1#53)[8,-19]
next#51(state#102,state#100)[7,-19]
L#52(,)[8,-18]
1#53(,)[8,-20]
then#54(if#55,R#57)[8,-18]
if#55(next#56,0#58)[8,-19]
next#56(state#102,state#101)[7,-19]
R#57(,)[8,-18]
0#58(,)[8,-20]
then#59(if#60,R#62)[8,-18]
if#60(next#61,x#63)[8,-19]
next#61(state#102,state#102)[7,-19]
R#62(,)[8,-18]
x#63(,)[8,-20]
then#64(x#69,R#68)[4,-18]
then#65(if#66,x#69)[4,-18]
if#66(next#67,0#70)[4,-19]
next#67(state#103,state#102)[3,-19]
R#68(,)[4,-18]
x#69(,)[4,-18]
0#70(,)[4,-20]
then#71(if#72,R#74)[4,-18]
if#72(next#73,1#75)[4,-19]
next#73(state#103,state#98)[3,-19]
R#74(,)[4,-18]
1#75(,)[4,-20]
then#76(if#77,R#79)[4,-18]
if#77(next#78,x#80)[4,-19]
next#78(state#103,state#103)[3,-19]
R#79(,)[4,-18]
x#80(,)[4,-20]
then#81(if#82,R#84)[0,-18]
if#82(next#83,1#85)[0,-19]
next#83(state#104,state#99)[-1,-19]
R#84(,)[0,-18]
1#85(,)[0,-20]
then#86(1#91,R#90)[0,-18]
then#87(if#88,1#91)[0,-18]
if#88(next#89,0#92)[0,-19]
next#89(state#104,state#103)[-1,-19]
R#90(,)[0,-18]
1#91(,)[0,-18]
0#92(,)[0,-20]
then#93(if#94,R#96)[0,-18]
if#94(next#95,x#97)[0,-19]
next#95(state#104,state#99)[-1,-19]
R#96(,)[0,-18]
x#97(,)[0,-20]
state#98\"accept\"(,)[3,-15]
state#99\"reject\"(,)[-1,-14]
state#100\"q5\"(,)[6,-22]
state#101\"q4\"(,)[7,-14]
state#102\"q3\"(,)[7,-19]
state#103\"q2\"(,)[3,-19]
state#104\"q1\"(,)[-1,-19]
initial#105(,state#104)[-2,-20]
current#106(machine#4,state#104)[-4,-17]
end#107(,state#99)[-2,-12]
end#108(,state#98)[2,-13]
"(,)[-1,-1]
m_lib#7(pool#4,actions#8)[-1,-1]
actions#8(,)[0,-2]
m_terms#9(actions#8,list#10)[-1,-1]
list#10(,)[-1,-1]
.[i]#11(list#10,place#12)[-1,-1]
place#12"+place(,machine)->+[del](,+place)->machine->tape(machine,cell)->cell(,_0)->_0->head(machine,cell#2)->cell#2(,)...
->+[down](machine,)->+[right]#2(+[down],)->+[down]#2(+[right]#2,)...
->+[moveTo](tape,+[down])...
->+[moveTo](cell,+[right]#2)->+[moveTo](_0,+[down]#2)->+[expand](,cell)...
->+[up](cell#2,)->+[moveTo](head,+[up])"(,)[-4,-5]
.[i]#13(list#10,expand#14)[-1,-1]
expand#14"+expand(,cell)->+[del](,+expand)->cell->next(cell,cell#2)->cell#2(,_0)->_0(,)...
->+[right](cell,)->+[right]#2(+[right],)->+[down](+[right]#2,)...
->+[moveTo](next,+[right])->+[moveTo](cell#2,+[right]#2)->+[moveTo](_0,+[down])...
->+[expand](,cell#2)"(,)[-5,-5]
.[i]#15(list#10,moveRight#16)[-1,-1]
moveRight#16"+moveRight(,machine)->+[del](,+moveRight)->machine->head(machine,cell)->cell->[]{
	next(cell,cell#2)->cell#2->+[rt_connect](head,cell#2)...
	->+[up](cell#2,)->+[moveTo](head,+[up])
}:->[],->>[]{
	+next(cell,+cell)->+cell(,+0)->+0->+[rt_connect](head,+cell)...
	->+[expand](,cell)...
	->+[up](+cell,)->+[moveTo](head,+[up])
}"(,)[-7,-5]
.[i]#17(list#10,moveLeft#18)[-1,-1]
moveLeft#18"+moveLeft(,machine)->+[del](,+moveLeft)->machine->head(machine,cell)->cell(,)...
->next(cell#2,cell)->cell#2->+[rt_connect](head,cell#2)...
->+[up](cell#2,)->+[moveTo](head,+[up])"(,)[-6,-5]
.[i]#19(list#10,writeCell#20)[-1,-1]
writeCell#20"+writeCell(_re,machine)->+[del](,+writeCell)->_re\"[01x]\"->machine->head(machine,cell)->cell(,_01x)->_01x(,)...
->+[write](_re,_01x)"(,)[-7,-4]
.[i]#21(list#10,move#22)[-1,-1]
move#22"+move(machine,_LR)->+[del](,+move)->machine->_LR->+R->+[del](,+R)->[]{[eq](_LR,+R)}:
->+[moveRight](,machine),
->>+[moveLeft](,machine)
"(,)[-6,-4]
.[i]#23(list#10,runOneStep#24)[-1,-1]
runOneStep#24"+runOneStep(,machine)->+[del](,+runOneStep)->machine->current(machine,state)->state(,)...
->head(machine,cell)->cell(,_01x)->_01x(,)...
->[branch](state,_01x)->next([branch],state#2)->state#2->+[rt_connect](current,state#2)...
->motion([branch],_LR)->_LR(,)...
->[]{write([branch],_01x#2)->_01x#2}:
->write([branch],_01x#3)->_01x#3->+[writeCell](_01x#3,machine)->+[move](machine,_LR),
->>+[move](machine,_LR)
"(,)[-5,-4]
.[i]#25(list#10,run#26)[-1,-1]
run#26"+run(,machine)->+[del](,+run)->machine->current(machine,state)->state{[]=>end(,state)}...
->+[runOneStep](,machine)->+[run](,machine)"(,)[-4,-4]
m_motor#27(actions#8,compiler#28)[-1,-1]
compiler#28(,)[-1,-1]
m_terms#29(compiler#28,list#30)[-1,-1]
list#30(,)[-1,-1]
.[i]#31(list#30,branch#32)[-1,-1]
branch#32"+branch(state,_re)->state->_re\"[01x]\"->next(state,state#2)->state#2(,)...
->if(next,_01x)->_01x->[eq](_01x,_re)...
->+next(+branch,state#2)->[]{
	then(if,_re#LR)->_re#LR\"[LR]\"->+motion(+branch,_re#LR)
}:->[],->>[]{
	then(if,_w)->_w->+write(+branch,_w)->then(_w,_LR)->_LR->+motion(+branch,_LR)
}"(,)[-7,-2]
m_source#33(compiler#28,pool#4)[-1,-1]
m_pool#34(pool#4,list#35)[-1,-1]
list#35(,)[-1,-1]
.[i]#36(list#35,nouns#37)[-1,-1]
nouns#37(,compiler#28)[-6,-7]
.[i]#38(list#35,verbs#39)[-1,-1]
verbs#39(,actions#8)[-5,-7]
.[i]#40(list#35,selection#41)[-1,-1]
selection#41(,list#276)[-7,-7]
.[i]#42(list#35,expand#14)[-1,-1]
.[i]#43(list#35,place#12)[-1,-1]
.[i]#44(list#35,moveLeft#18)[-1,-1]
.[i]#45(list#35,moveRight#16)[-1,-1]
.[i]#46(list#35,writeCell#20)[-1,-1]
.[i]#47(list#35,branch#32)[-1,-1]
.[i]#48(list#35,move#22)[-1,-1]
.[i]#49(list#35,runOneStep#24)[-1,-1]
.[i]#50(list#35,run#26)[-1,-1]
.[i]#51(list#35,0#52)[-1,-1]
0#52(,)[0,-2]
.[i]#53(list#35,tape#54)[-1,-1]
tape#54(machine#60,cell#56)[-1,-3]
.[i]#55(list#35,cell#56)[-1,-1]
cell#56(,0#52)[0,-3]
.[i]#57(list#35,head#58)[-1,-1]
head#58(machine#60,cell#56)[0,-4]
.[i]#59(list#35,machine#60)[-1,-1]
machine#60(,)[-1,-4]
.[i]#61(list#35,0#62)[-1,-1]
0#62(,)[2,-2]
.[i]#63(list#35,cell#64)[-1,-1]
cell#64(,0#62)[2,-3]
.[i]#65(list#35,next#66)[-1,-1]
next#66(cell#56,cell#64)[1,-3]
.[i]#67(list#35,0#68)[-1,-1]
0#68(,)[4,-2]
.[i]#69(list#35,cell#70)[-1,-1]
cell#70(,0#68)[4,-3]
.[i]#71(list#35,next#72)[-1,-1]
next#72(cell#64,cell#70)[3,-3]
.[i]#73(list#35,0#74)[-1,-1]
0#74(,)[6,-2]
.[i]#75(list#35,cell#76)[-1,-1]
cell#76(,0#74)[6,-3]
.[i]#77(list#35,next#78)[-1,-1]
next#78(cell#70,cell#76)[5,-3]
.[i]#79(list#35,1#80)[-1,-1]
1#80(,)[8,-2]
.[i]#81(list#35,cell#82)[-1,-1]
cell#82(,1#80)[8,-3]
.[i]#83(list#35,next#84)[-1,-1]
next#84(cell#76,cell#82)[7,-3]
.[i]#85(list#35,then#86)[-1,-1]
then#86(if#88,R#92)[7,-21]
.[i]#87(list#35,if#88)[-1,-1]
if#88(next#90,1#94)[7,-22]
.[i]#89(list#35,next#90)[-1,-1]
next#90(state#252,state#258)[6,-22]
.[i]#91(list#35,R#92)[-1,-1]
R#92(,)[7,-21]
.[i]#93(list#35,1#94)[-1,-1]
1#94(,)[7,-23]
.[i]#95(list#35,then#96)[-1,-1]
then#96(if#98,L#102)[7,-21]
.[i]#97(list#35,if#98)[-1,-1]
if#98(next#100,0#104)[7,-22]
.[i]#99(list#35,next#100)[-1,-1]
next#100(state#252,state#252)[6,-22]
.[i]#101(list#35,L#102)[-1,-1]
L#102(,)[7,-21]
.[i]#103(list#35,0#104)[-1,-1]
0#104(,)[7,-23]
.[i]#105(list#35,then#106)[-1,-1]
then#106(if#108,L#112)[7,-21]
.[i]#107(list#35,if#108)[-1,-1]
if#108(next#110,x#114)[7,-22]
.[i]#109(list#35,next#110)[-1,-1]
next#110(state#252,state#252)[6,-22]
.[i]#111(list#35,L#112)[-1,-1]
L#112(,)[7,-21]
.[i]#113(list#35,x#114)[-1,-1]
x#114(,)[7,-23]
.[i]#115(list#35,then#116)[-1,-1]
then#116(if#118,R#122)[8,-13]
.[i]#117(list#35,if#118)[-1,-1]
if#118(next#120,1#124)[8,-14]
.[i]#119(list#35,next#120)[-1,-1]
next#120(state#254,state#250)[7,-14]
.[i]#121(list#35,R#122)[-1,-1]
R#122(,)[8,-13]
.[i]#123(list#35,1#124)[-1,-1]
1#124(,)[8,-15]
.[i]#125(list#35,then#126)[-1,-1]
then#126(x#136,R#134)[8,-13]
.[i]#127(list#35,then#128)[-1,-1]
then#128(if#130,x#136)[8,-13]
.[i]#129(list#35,if#130)[-1,-1]
if#130(next#132,0#138)[8,-14]
.[i]#131(list#35,next#132)[-1,-1]
next#132(state#254,state#256)[7,-14]
.[i]#133(list#35,R#134)[-1,-1]
R#134(,)[8,-13]
.[i]#135(list#35,x#136)[-1,-1]
x#136(,)[8,-13]
.[i]#137(list#35,0#138)[-1,-1]
0#138(,)[8,-15]
.[i]#139(list#35,then#140)[-1,-1]
then#140(if#142,R#146)[8,-13]
.[i]#141(list#35,if#142)[-1,-1]
if#142(next#144,x#148)[8,-14]
.[i]#143(list#35,next#144)[-1,-1]
next#144(state#254,state#254)[7,-14]
.[i]#145(list#35,R#146)[-1,-1]
R#146(,)[8,-13]
.[i]#147(list#35,x#148)[-1,-1]
x#148(,)[8,-15]
.[i]#149(list#35,then#150)[-1,-1]
then#150(if#152,L#156)[8,-18]
.[i]#151(list#35,if#152)[-1,-1]
if#152(next#154,1#158)[8,-19]
.[i]#153(list#35,next#154)[-1,-1]
next#154(state#256,state#252)[7,-19]
.[i]#155(list#35,L#156)[-1,-1]
L#156(,)[8,-18]
.[i]#157(list#35,1#158)[-1,-1]
1#158(,)[8,-20]
.[i]#159(list#35,then#160)[-1,-1]
then#160(if#162,R#166)[8,-18]
.[i]#161(list#35,if#162)[-1,-1]
if#162(next#164,0#168)[8,-19]
.[i]#163(list#35,next#164)[-1,-1]
next#164(state#256,state#254)[7,-19]
.[i]#165(list#35,R#166)[-1,-1]
R#166(,)[8,-18]
.[i]#167(list#35,0#168)[-1,-1]
0#168(,)[8,-20]
.[i]#169(list#35,then#170)[-1,-1]
then#170(if#172,R#176)[8,-18]
.[i]#171(list#35,if#172)[-1,-1]
if#172(next#174,x#178)[8,-19]
.[i]#173(list#35,next#174)[-1,-1]
next#174(state#256,state#256)[7,-19]
.[i]#175(list#35,R#176)[-1,-1]
R#176(,)[8,-18]
.[i]#177(list#35,x#178)[-1,-1]
x#178(,)[8,-20]
.[i]#179(list#35,then#180)[-1,-1]
then#180(x#190,R#188)[4,-18]
.[i]#181(list#35,then#182)[-1,-1]
then#182(if#184,x#190)[4,-18]
.[i]#183(list#35,if#184)[-1,-1]
if#184(next#186,0#192)[4,-19]
.[i]#185(list#35,next#186)[-1,-1]
next#186(state#258,state#256)[3,-19]
.[i]#187(list#35,R#188)[-1,-1]
R#188(,)[4,-18]
.[i]#189(list#35,x#190)[-1,-1]
x#190(,)[4,-18]
.[i]#191(list#35,0#192)[-1,-1]
0#192(,)[4,-20]
.[i]#193(list#35,then#194)[-1,-1]
then#194(if#196,R#200)[4,-18]
.[i]#195(list#35,if#196)[-1,-1]
if#196(next#198,1#202)[4,-19]
.[i]#197(list#35,next#198)[-1,-1]
next#198(state#258,state#248)[3,-19]
.[i]#199(list#35,R#200)[-1,-1]
R#200(,)[4,-18]
.[i]#201(list#35,1#202)[-1,-1]
1#202(,)[4,-20]
.[i]#203(list#35,then#204)[-1,-1]
then#204(if#206,R#210)[4,-18]
.[i]#205(list#35,if#206)[-1,-1]
if#206(next#208,x#212)[4,-19]
.[i]#207(list#35,next#208)[-1,-1]
next#208(state#258,state#258)[3,-19]
.[i]#209(list#35,R#210)[-1,-1]
R#210(,)[4,-18]
.[i]#211(list#35,x#212)[-1,-1]
x#212(,)[4,-20]
.[i]#213(list#35,then#214)[-1,-1]
then#214(if#216,R#220)[0,-18]
.[i]#215(list#35,if#216)[-1,-1]
if#216(next#218,1#222)[0,-19]
.[i]#217(list#35,next#218)[-1,-1]
next#218(state#260,state#250)[-1,-19]
.[i]#219(list#35,R#220)[-1,-1]
R#220(,)[0,-18]
.[i]#221(list#35,1#222)[-1,-1]
1#222(,)[0,-20]
.[i]#223(list#35,then#224)[-1,-1]
then#224(1#234,R#232)[0,-18]
.[i]#225(list#35,then#226)[-1,-1]
then#226(if#228,1#234)[0,-18]
.[i]#227(list#35,if#228)[-1,-1]
if#228(next#230,0#236)[0,-19]
.[i]#229(list#35,next#230)[-1,-1]
next#230(state#260,state#258)[-1,-19]
.[i]#231(list#35,R#232)[-1,-1]
R#232(,)[0,-18]
.[i]#233(list#35,1#234)[-1,-1]
1#234(,)[0,-18]
.[i]#235(list#35,0#236)[-1,-1]
0#236(,)[0,-20]
.[i]#237(list#35,then#238)[-1,-1]
then#238(if#240,R#244)[0,-18]
.[i]#239(list#35,if#240)[-1,-1]
if#240(next#242,x#246)[0,-19]
.[i]#241(list#35,next#242)[-1,-1]
next#242(state#260,state#250)[-1,-19]
.[i]#243(list#35,R#244)[-1,-1]
R#244(,)[0,-18]
.[i]#245(list#35,x#246)[-1,-1]
x#246(,)[0,-20]
.[i]#247(list#35,state#248)[-1,-1]
state#248"accept"(,)[3,-15]
.[i]#249(list#35,state#250)[-1,-1]
state#250"reject"(,)[-1,-14]
.[i]#251(list#35,state#252)[-1,-1]
state#252"q5"(,)[6,-22]
.[i]#253(list#35,state#254)[-1,-1]
state#254"q4"(,)[7,-14]
.[i]#255(list#35,state#256)[-1,-1]
state#256"q3"(,)[7,-19]
.[i]#257(list#35,state#258)[-1,-1]
state#258"q2"(,)[3,-19]
.[i]#259(list#35,state#260)[-1,-1]
state#260"q1"(,)[-1,-19]
.[i]#261(list#35,initial#262)[-1,-1]
initial#262(,state#260)[-2,-20]
.[i]#263(list#35,current#264)[-1,-1]
current#264(machine#60,state#260)[-4,-17]
.[i]#265(list#35,end#266)[-1,-1]
end#266(,state#250)[-2,-12]
.[i]#267(list#35,end#268)[-1,-1]
end#268(,state#248)[2,-13]
m_motor#269(editor#0,compiler#28)[-1,-1]
m_debugger#270(editor#0,debugger#271)[-1,-1]
debugger#271(,)[-1,-1]
m_motor#272(debugger#271,compiler#28)[-1,-1]
m_screen#273(editor#0,screen#274)[-1,-1]
screen#274(,)[-1,-1]
m_select#275(screen#274,list#276)[-1,-1]
list#276(,)[-1,-1]
.[i]#277(list#276,)[-1,-1]
m_x#278(editor#0,961#279)[-1,-1]
961#279(,)[-1,-1]
m_y#280(editor#0,38#281)[-1,-1]
38#281(,)[-1,-1]
m_height#282(editor#0,991#283)[-1,-1]
991#283(,)[-1,-1]
m_width#284(editor#0,958#285)[-1,-1]
958#285(,)[-1,-1]
